{"version":3,"file":"extension.js","mappings":"23BAEA,oBAAyBA,GACrBC,QAAQC,IAAI,0CAGZ,MAAMC,EAAW,IAAIC,EAAsBJ,EAAQK,cACnDL,EAAQM,cAAcC,KAClBC,EAAOC,OAAOC,4BAA4B,qBAAsBP,GAExE,EAqMA,wBAA8B,EA/M9B,kBAYA,MAAMC,EAC2BO,cAA7B,WAAAC,CAA6BD,GAAA,KAAAA,cAAAA,CAA4B,CAElD,kBAAAE,CACHC,EACAd,EACAe,GAEAD,EAAYE,QAAQC,QAAU,CAC1BC,eAAe,EACfC,mBAAoB,CAACC,KAAKT,gBAG9BG,EAAYE,QAAQK,KAAOD,KAAKE,mBAAmBR,EAAYE,SAG/DF,EAAYE,QAAQO,qBAChBC,IACI,GACS,uBADDA,EAAQC,QAER,IACI,MAAMC,EAAaC,KAAKC,MAAMJ,EAAQK,aACtCf,EAAYE,QAAQc,YAAY,CAAEL,QAAS,YAAaC,cAC5D,CAAE,MAAOK,GACLvB,EAAOC,OAAOuB,iBAAiB,uBACnC,CAER,GAGZ,CAEQ,kBAAAV,CAAmBN,GACvB,MAAO,6rPA+JX,E,UC5MJiB,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://tableify-json/./src/extension.ts","webpack://tableify-json/external commonjs \"vscode\"","webpack://tableify-json/webpack/bootstrap","webpack://tableify-json/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('Tableify JSON extension is now active!');\n\n    // Register the custom sidebar view provider\n    const provider = new JsonTableViewProvider(context.extensionUri);\n    context.subscriptions.push(\n        vscode.window.registerWebviewViewProvider('tableify-json-view', provider)\n    );\n}\n\nclass JsonTableViewProvider implements vscode.WebviewViewProvider {\n    constructor(private readonly _extensionUri: vscode.Uri) {}\n\n    public resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken,\n    ) {\n        webviewView.webview.options = {\n            enableScripts: true,\n            localResourceRoots: [this._extensionUri]\n        };\n\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n        // Handle messages from the webview\n        webviewView.webview.onDidReceiveMessage(\n            message => {\n                switch (message.command) {\n                    case 'convertJsonToTable':\n                        try {\n                            const jsonObject = JSON.parse(message.jsonContent);\n                            webviewView.webview.postMessage({ command: 'showTable', jsonObject });\n                        } catch (error) {\n                            vscode.window.showErrorMessage('Invalid JSON format.');\n                        }\n                        break;\n                }\n            }\n        );\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        return `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Tableify JSON</title>\n                <style>\n                    body {\n                        font-family: var(--vscode-font-family);\n                        padding: 10px;\n                        color: var(--vscode-editor-foreground);\n                        background-color: var(--vscode-editor-background);\n                    }\n                    textarea {\n                        width: 100%;\n                        height: 150px;\n                        padding: 8px;\n                        font-family: var(--vscode-editor-font-family);\n                        font-size: var(--vscode-editor-font-size);\n                        background-color: var(--vscode-input-background);\n                        color: var(--vscode-input-foreground);\n                        border: 1px solid var(--vscode-input-border);\n                        margin-bottom: 10px;\n                    }\n                    button {\n                        padding: 8px 12px;\n                        background-color: var(--vscode-button-background);\n                        color: var(--vscode-button-foreground);\n                        border: none;\n                        cursor: pointer;\n                        width: 100%;\n                    }\n                    button:hover {\n                        background-color: var(--vscode-button-hoverBackground);\n                    }\n                    table {\n                        width: 100%;\n                        border-collapse: collapse;\n                        margin-top: 10px;\n                    }\n                    th, td {\n                        padding: 6px;\n                        text-align: left;\n                        border: 1px solid var(--vscode-panel-border);\n                        font-size: var(--vscode-editor-font-size);\n                    }\n                    th {\n                        background-color: var(--vscode-editor-lineHighlightBackground);\n                    }\n                    .nested-table {\n                        margin: 0;\n                        padding: 0;\n                        border: none;\n                    }\n                </style>\n            </head>\n            <body>\n                <textarea id=\"jsonInput\" placeholder=\"Paste your JSON here...\"></textarea>\n                <button onclick=\"convertJson()\">Convert to Table</button>\n                <div id=\"tableContainer\"></div>\n\n                <script>\n                    const vscode = acquireVsCodeApi();\n\n                    function convertJson() {\n                        const jsonContent = document.getElementById('jsonInput').value;\n                        if (jsonContent) {\n                            vscode.postMessage({\n                                command: 'convertJsonToTable',\n                                jsonContent: jsonContent\n                            });\n                        }\n                    }\n\n                    window.addEventListener('message', event => {\n                        const message = event.data;\n                        if (message.command === 'showTable') {\n                            const tableContainer = document.getElementById('tableContainer');\n                            tableContainer.innerHTML = generateTable(message.jsonObject);\n                        }\n                    });\n\n                    function generateTable(jsonObject) {\n                        if (Array.isArray(jsonObject)) {\n                            return generateArrayTable(jsonObject);\n                        } else if (typeof jsonObject === 'object' && jsonObject !== null) {\n                            return generateObjectTable(jsonObject);\n                        } else {\n                            // Handle primitive values (string, number, boolean, null)\n                            return \\`<p>\\${jsonObject}</p>\\`;\n                        }\n                    }\n\n                    function generateObjectTable(jsonObject) {\n                        const keys = Object.keys(jsonObject);\n                        if (keys.length === 0) return '<p>Empty object</p>';\n\n                        let tableHtml = '<table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody>';\n                        keys.forEach(key => {\n                            let value = jsonObject[key];\n                            if (typeof value === 'object' && value !== null) {\n                                value = generateTable(value); // Recursively handle nested objects or arrays\n                                tableHtml += \\`<tr><td>\\${key}</td><td class=\"nested-table\">\\${value}</td></tr>\\`;\n                            } else {\n                                tableHtml += \\`<tr><td>\\${key}</td><td>\\${value}</td></tr>\\`;\n                            }\n                        });\n                        tableHtml += '</tbody></table>';\n                        return tableHtml;\n                    }\n\n                    function generateArrayTable(jsonArray) {\n                        if (jsonArray.length === 0) return '<p>Empty array</p>';\n\n                        // Check if the array contains objects\n                        if (typeof jsonArray[0] === 'object' && jsonArray[0] !== null && !Array.isArray(jsonArray[0])) {\n                            const keys = Object.keys(jsonArray[0]);\n                            let tableHtml = '<table><thead><tr>';\n                            keys.forEach(key => {\n                                tableHtml += \\`<th>\\${key}</th>\\`;\n                            });\n                            tableHtml += '</tr></thead><tbody>';\n\n                            jsonArray.forEach(item => {\n                                tableHtml += '<tr>';\n                                keys.forEach(key => {\n                                    let value = item[key];\n                                    if (typeof value === 'object' && value !== null) {\n                                        value = generateTable(value); // Recursively handle nested objects or arrays\n                                        tableHtml += \\`<td class=\"nested-table\">\\${value}</td>\\`;\n                                    } else {\n                                        tableHtml += \\`<td>\\${value}</td>\\`;\n                                    }\n                                });\n                                tableHtml += '</tr>';\n                            });\n                            tableHtml += '</tbody></table>';\n                            return tableHtml;\n                        } else {\n                            // Handle arrays of primitives or arrays of arrays\n                            let tableHtml = '<table><tbody>';\n                            jsonArray.forEach(item => {\n                                tableHtml += '<tr><td>';\n                                if (typeof item === 'object' && item !== null) {\n                                    tableHtml += generateTable(item); // Recursively handle nested arrays or objects\n                                } else {\n                                    tableHtml += item; // Handle primitive values\n                                }\n                                tableHtml += '</td></tr>';\n                            });\n                            tableHtml += '</tbody></table>';\n                            return tableHtml;\n                        }\n                    }\n                </script>\n            </body>\n            </html>\n        `;\n    }\n}\n\nexport function deactivate() {}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","provider","JsonTableViewProvider","extensionUri","subscriptions","push","vscode","window","registerWebviewViewProvider","_extensionUri","constructor","resolveWebviewView","webviewView","_token","webview","options","enableScripts","localResourceRoots","this","html","_getHtmlForWebview","onDidReceiveMessage","message","command","jsonObject","JSON","parse","jsonContent","postMessage","error","showErrorMessage","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}