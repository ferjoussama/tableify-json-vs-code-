(()=>{"use strict";var e={265:function(e,n,t){var o,r=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),l=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},o(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=o(e),l=0;l<t.length;l++)"default"!==t[l]&&r(n,e,t[l]);return a(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){console.log("Tableify JSON extension is now active!");const n=new i(e.extensionUri);e.subscriptions.push(s.window.registerWebviewViewProvider("tableify-json-view",n))},n.deactivate=function(){};const s=l(t(398));class i{_extensionUri;constructor(e){this._extensionUri=e}resolveWebviewView(e,n,t){e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage((n=>{if("convertJsonToTable"===n.command)try{const t=JSON.parse(n.jsonContent);e.webview.postMessage({command:"showTable",jsonObject:t})}catch(e){s.window.showErrorMessage("Invalid JSON format.")}}))}_getHtmlForWebview(e){return"\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Tableify JSON</title>\n                <style>\n                    body {\n                        font-family: var(--vscode-font-family);\n                        padding: 10px;\n                        color: var(--vscode-editor-foreground);\n                        background-color: var(--vscode-editor-background);\n                    }\n                    textarea {\n                        width: 100%;\n                        height: 150px;\n                        padding: 8px;\n                        font-family: var(--vscode-editor-font-family);\n                        font-size: var(--vscode-editor-font-size);\n                        background-color: var(--vscode-input-background);\n                        color: var(--vscode-input-foreground);\n                        border: 1px solid var(--vscode-input-border);\n                        margin-bottom: 10px;\n                    }\n                    button {\n                        padding: 8px 12px;\n                        background-color: var(--vscode-button-background);\n                        color: var(--vscode-button-foreground);\n                        border: none;\n                        cursor: pointer;\n                        width: 100%;\n                    }\n                    button:hover {\n                        background-color: var(--vscode-button-hoverBackground);\n                    }\n                    table {\n                        width: 100%;\n                        border-collapse: collapse;\n                        margin-top: 10px;\n                    }\n                    th, td {\n                        padding: 6px;\n                        text-align: left;\n                        border: 1px solid var(--vscode-panel-border);\n                        font-size: var(--vscode-editor-font-size);\n                    }\n                    th {\n                        background-color: var(--vscode-editor-lineHighlightBackground);\n                    }\n                    .nested-table {\n                        margin: 0;\n                        padding: 0;\n                        border: none;\n                    }\n                </style>\n            </head>\n            <body>\n                <textarea id=\"jsonInput\" placeholder=\"Paste your JSON here...\"></textarea>\n                <button onclick=\"convertJson()\">Convert to Table</button>\n                <div id=\"tableContainer\"></div>\n\n                <script>\n                    const vscode = acquireVsCodeApi();\n\n                    function convertJson() {\n                        const jsonContent = document.getElementById('jsonInput').value;\n                        if (jsonContent) {\n                            vscode.postMessage({\n                                command: 'convertJsonToTable',\n                                jsonContent: jsonContent\n                            });\n                        }\n                    }\n\n                    window.addEventListener('message', event => {\n                        const message = event.data;\n                        if (message.command === 'showTable') {\n                            const tableContainer = document.getElementById('tableContainer');\n                            tableContainer.innerHTML = generateTable(message.jsonObject);\n                        }\n                    });\n\n                    function generateTable(jsonObject) {\n                        if (Array.isArray(jsonObject)) {\n                            return generateArrayTable(jsonObject);\n                        } else if (typeof jsonObject === 'object' && jsonObject !== null) {\n                            return generateObjectTable(jsonObject);\n                        } else {\n                            // Handle primitive values (string, number, boolean, null)\n                            return `<p>${jsonObject}</p>`;\n                        }\n                    }\n\n                    function generateObjectTable(jsonObject) {\n                        const keys = Object.keys(jsonObject);\n                        if (keys.length === 0) return '<p>Empty object</p>';\n\n                        let tableHtml = '<table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody>';\n                        keys.forEach(key => {\n                            let value = jsonObject[key];\n                            if (typeof value === 'object' && value !== null) {\n                                value = generateTable(value); // Recursively handle nested objects or arrays\n                                tableHtml += `<tr><td>${key}</td><td class=\"nested-table\">${value}</td></tr>`;\n                            } else {\n                                tableHtml += `<tr><td>${key}</td><td>${value}</td></tr>`;\n                            }\n                        });\n                        tableHtml += '</tbody></table>';\n                        return tableHtml;\n                    }\n\n                    function generateArrayTable(jsonArray) {\n                        if (jsonArray.length === 0) return '<p>Empty array</p>';\n\n                        // Check if the array contains objects\n                        if (typeof jsonArray[0] === 'object' && jsonArray[0] !== null && !Array.isArray(jsonArray[0])) {\n                            const keys = Object.keys(jsonArray[0]);\n                            let tableHtml = '<table><thead><tr>';\n                            keys.forEach(key => {\n                                tableHtml += `<th>${key}</th>`;\n                            });\n                            tableHtml += '</tr></thead><tbody>';\n\n                            jsonArray.forEach(item => {\n                                tableHtml += '<tr>';\n                                keys.forEach(key => {\n                                    let value = item[key];\n                                    if (typeof value === 'object' && value !== null) {\n                                        value = generateTable(value); // Recursively handle nested objects or arrays\n                                        tableHtml += `<td class=\"nested-table\">${value}</td>`;\n                                    } else {\n                                        tableHtml += `<td>${value}</td>`;\n                                    }\n                                });\n                                tableHtml += '</tr>';\n                            });\n                            tableHtml += '</tbody></table>';\n                            return tableHtml;\n                        } else {\n                            // Handle arrays of primitives or arrays of arrays\n                            let tableHtml = '<table><tbody>';\n                            jsonArray.forEach(item => {\n                                tableHtml += '<tr><td>';\n                                if (typeof item === 'object' && item !== null) {\n                                    tableHtml += generateTable(item); // Recursively handle nested arrays or objects\n                                } else {\n                                    tableHtml += item; // Handle primitive values\n                                }\n                                tableHtml += '</td></tr>';\n                            });\n                            tableHtml += '</tbody></table>';\n                            return tableHtml;\n                        }\n                    }\n                <\/script>\n            </body>\n            </html>\n        "}}},398:e=>{e.exports=require("vscode")}},n={},t=function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={exports:{}};return e[o].call(a.exports,a,a.exports,t),a.exports}(265);module.exports=t})();